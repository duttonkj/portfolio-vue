/* ==========================================================================
   kevindutton.com
   ========================================================================== */

/*!*
 * compontent based css based on inuitcss, by @csswizardry
 *
 * github.com/inuitcss | inuitcss.com
 */

/**
 * Changes made to accomidate vue components struct
 */

/**
 * CONTENTS
 *
 * SETTINGS
 * Global...............Project-wide variables and settings.
 *
 * TOOLS
 * Functions............A small collection of useful functions.
 * Mixins...............Globally-available mixins.
 * Widths...............A mixin to quickly generate an arbitrary number of width
 *                      classes for use alongside our grid system.
 * Breakpoints..............Use posscss mediquery.
 *
 * GENERIC
 * Box-sizing...........Better default `box-sizing`.
 * Normalize.css........A level playing field using @necolas’ Normalize.css.
 * Shared...............Sensibly and tersely share some global commonalities
 *                      (particularly useful when managing vertical rhythm).
 *
 * ELEMENTS
 * Page.................Set up our document’s default `font-size` and
 *                      `line-height`.
 * Headings.............Very minimal (i.e. only font-size information) for
 *                      headings 1 through 6.
 * Images...............Base image styles.
 *
 * OBJECTS
 * Wrapper..............Page constraint object.
 * Layout...............Generic layout module.
 * Media................Image- and text-like content side by side. The
 *                      poster-child of OOCSS.
 * Flag.................Table-layout-based advancement on the Media object.
 * List-bare............Lists with no bullets or indents.
 * List-inline..........A list whose items all site in a line.
 * Box..................Simple boxing abstraction.
 * Block................Image-on-top-of-text object.
 * Ratio................A container for maintaining aspect ratio of content.
 * Crop.................Provide a cropping context for media (images, etc.).
 *
 * COMPONENTS
 * Buttons..............An example button component, and how it fits into the
 *                      framework.
 *
 * UTILITIES
 * Clearfix.............Bind our clearfix onto a utility class.
 * Widths...............Simple width helper classes.
 * Headings.............Reassigning our heading styles to helper classes.
 * Spacing..............Nudge bits of the DOM around with these spacing
 *                      classes.
 * Print................Reset-like styles taken from the HTML5 Boilerplate.
 *                      classes..
 * Hide.................Helper classes to hide content
 */

@import "normalize-css";





 /* *******************************************************
    SETTINGS
    ******************************************************/


/* ==========================================================================
   Global
   ========================================================================== */

/**
 * Variables that need to be available project wide
 */
/*:root {
  --globalFontSize: 16px;
  --globalLineHeight: 1.4;
  --globalRadius: 3px;
  --globalTransition: (1/3) + s;
  --globalSpacingUnit: 1.4rem;

  --colorLink: #08B2E3;
  --colorBase: #292c36;
  --colorBorderPrimary: #A5BFA8;
  --colorBorderSecondary: #D7E4D8;

  --colorGreen: #93C56E;
  --colorBlue: #8484BE;
  --colorOrange: #D28D5D;
  --colorRed: #DC413B;
  --colorPurple: #B64193;
  --colorOcean: #4AABA4;

  --geomanistRegular: {
    font-family: 'geomanistregular', 'Avenir Next', Helvetica, arial, sans-serif;
    font-wieght: normal;
  };
  --geomanistLight: {
    font-family: 'geomanistextralight', 'Avenir Next', Helvetica, arial, sans-serif;
    font-wieght: normal;
  };
  --geomanistBlack: {
    font-family: 'geomanistblack', 'Avenir Next', Helvetica, arial, sans-serif;
    font-wieght: normal;
  };
  --geomanistUltra: {
    font-family: 'geomanistultra', 'Avenir Next', Helvetica, arial, sans-serif;
    font-wieght: normal;
  };

}*/




/* *******************************************************
   TOOLS
   ******************************************************/


/* ==========================================================================
   Breakpoints
   ========================================================================== */

/**
 * setup breakpoints
 * Typically use SassMQ for this but lets see how it works in PostCSS work
 */

@custom-media --mobile (width <= 20rem);
@custom-media --tablet (width <= 48rem);
@custom-media --desktop (width <= 56.25rem);
@custom-media --wide (width <= 81.25rem);
@custom-media --xWide (width <= 95rem);




/* *******************************************************
   GENERIC
   ******************************************************/


/* ==========================================================================
   Box-sizing
   ========================================================================== */

/**
 * More sensible default box-sizing:
 * css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice
 */

html {
  box-sizing: border-box;
}

* {

  &,
  &:before,
  &:after {
    box-sizing: inherit;
  }

}


/* ==========================================================================
   Normalize.css
   ========================================================================== */

/**
 * Imported at the start of teh document. Can't figure out why the import won't work inline
 */



/* ==========================================================================
 SHARED
 ========================================================================== */

/**
 * Shared declarations for certain elements.
 */

/**
 * Always declare margins in the same direction:
 * csswizardry.com/2012/06/single-direction-margin-declarations
 */

h1, h2, h3, h4, h5, h6,
ul, ol, dl,
blockquote, p, address,
hr,
table,
fieldset, figure,
pre {
  margin-bottom: var(--globalSpacingUnit);
}


/**
 * Consistent indentation for lists.
 */

ul, ol,
dd {
  margin-left: var(--globalSpacingUnit);
}



/* *******************************************************
   ELEMENTS
   ******************************************************/


/* ==========================================================================
   Page
   ========================================================================== */

/**
 * Simple page-level setup.
 *
 * 1. Set the default `font-size` and `line-height` for the entire project,
 *    sourced from our default variables. The `font-size` is calculated to exist
 *    in ems, the `line-height` is calculated to exist unitlessly.
 * 2. Force scrollbars to always be visible to prevent awkward ‘jumps’ when
 *    navigating between pages that do/do not have enough content to produce
 *    scrollbars naturally.
 * 3. Ensure the page always fills at least the entire height of the viewport.
 */

html {
  font-size: 1rem; /* [1] */
  line-height: var(--globalLineHeight); /* [1] */
  overflow-y: scroll; /* [2] */
  min-height: 100%; /* [3] */
}



/* ==========================================================================
   Headings
   ========================================================================== */

/**
 * Simple default styles for headings 1 through 6. Anything more opinionated
 * than simple font-size changes should likely be applied via classes (see:
 * http://csswizardry.com/2016/02/managing-typography-on-large-apps/).
 */

h1 {
  font-size: 2rem;
}

h2 {
  font-size: 1.8rem;
}

h3 {
  font-size: 1.6rem;
}

h4 {
  font-size: 1.4rem;
}

h5 {
  font-size: 1.2rem;
}

h6 {
  font-size: 1rem;
}



/* ==========================================================================
   Images
   ========================================================================== */

/**
 * 1. Fluid images for responsive purposes.
 * 2. Offset `alt` text from surrounding copy.
 * 3. Setting `vertical-align` removes the whitespace that appears under `img`
 *    elements when they are dropped into a page as-is. Safer alternative to
 *    using `display: block;`.
 */

img {
  max-width: 100%; /* [1] */
  font-style: italic; /* [2] */
  vertical-align: middle; /* [3] */
}


/**
 * 1. If a `width` and/or `height` attribute have been explicitly defined, let’s
 *    not make the image fluid.
 */

img[width], /* [1] */
img[height] {  /* [1] */
  max-width: none;
}



/* *******************************************************
   Objects
   ******************************************************/

/* ==========================================================================
  Wrappers
  ========================================================================== */

/**
* Page-level constraining and wrapping elements.
*/

.o-wrapper {
 @include inuit-clearfix();
 padding-right: $spacingUnit;
 padding-left:  $spacingUnit;
 margin-right: auto;
 margin-left:  auto;
 max-width: 1200px;
}


/* ==========================================================================
   #LAYOUT
   ========================================================================== */

/**
 * Grid-like layout system.
 *
 * The Layout object provides us with a column-style layout system. This file
 * contains the basic structural elements, but classes should be complemented
 * with width Utilities, for example:
 *
 *   <div class="o-layout">
 *     <div class="o-layout__item  u-width-1/2">
 *     </div>
 *     <div class="o-layout__item  u-width-1/2">
 *     </div>
 *   </div>
 *
 * The above will create a two-column structure in which each column will
 * fluidly fill half of the width of the parent. We can have more complex
 * systems:
 *
 *   <div class="o-layout">
 *     <div class="o-layout__item  u-width-1/1  u-width-1/3@medium">
 *     </div>
 *     <div class="o-layout__item  u-width-1/2  u-width-1/3@medium">
 *     </div>
 *     <div class="o-layout__item  u-width-1/2  u-width-1/3@medium">
 *     </div>
 *   </div>
 *
 * The above will create a system in which the first item will be 100% width
 * until we enter our medium breakpoint, when it will become 33.333% width. The
 * second and third items will be 50% of their parent, until they also become
 * 33.333% width at the medium breakpoint.
 *
 * We can also manipulate entire layout systems by adding a series of Modifiers
 * to the `.o-layout` Block. For example:
 *
 *   <div class="o-layout  o-layout--reverse">
 *
 * This will reverse the displayed order of the system so that it runs in the
 * opposite order to our source, effectively flipping the system over.
 *
 *   <div class="o-layout  o-layout--[right|center]">
 *
 * This will cause the system to fill up from either the centre or the right
 * hand side. Default behaviour is to fill up the layout system from the left.
 *
 * There are plenty more options available to us: explore them below.
 */




/* Default/mandatory classes.
   ========================================================================== */

/**
 * 1. Allows us to use the layout object on any type of element.
 * 2. We need to defensively reset any box-model properties.
 * 3. Use the negative margin trick for multi-row grids:
 *    http://csswizardry.com/2011/08/building-better-grid-systems/
 */

.o-layout {
  display: block; /* [1] */
  margin:  0; /* [2] */
  padding: 0; /* [2] */
  list-style: none; /* [1] */
  margin-left: -$spacingUnit; /* [3] */
  font-size: 0;
}


/**
 * 1. Required in order to combine fluid widths with fixed gutters.
 * 2. Allows us to manipulate grids vertically, with text-level properties,
 *    etc.
 * 3. Default item alignment is with the tops of each other, like most
 *    traditional grid/layout systems.
 * 4. By default, all layout items are full-width (mobile first).
 * 5. Gutters provided by left padding:
 *    http://csswizardry.com/2011/08/building-better-grid-systems/
 */

.o-layout__item {
  box-sizing: border-box; /* [1] */
  display: inline-block; /* [2] */
  vertical-align: top; /* [3] */
  width: 100%; /* [4] */
  padding-left: $spacingUnit; /* [5] */
  font-size: 1rem;

}



/* Vertical alignment modifiers.
   ========================================================================== */

/**
 * Align all grid items to the middles of each other.
 */

.o-layout--middle {

  > .o-layout__item {
    vertical-align: middle;
  }

}


/**
 * Align all grid items to the bottoms of each other.
 */

.o-layout--bottom {

  > .o-layout__item {
    vertical-align: bottom;
  }

}





/* Fill order modifiers.
   ========================================================================== */

/**
 * Fill up the layout system from the centre.
 */

.o-layout--center {
  text-align: center;

  > .o-layout__item {
    text-align: left;
  }

}


/**
 * Fill up the layout system from the right-hand side.
 */

.o-layout--right {
  text-align: right;

  > .o-layout__item {
    text-align: left;
  }

}


/**
 * Reverse the rendered order of the grid system.
 */

.o-layout--reverse {
  direction: rtl;

  > .o-layout__item {
    direction: ltr;
    text-align: left;
  }

}





/* ==========================================================================
   #LIST-BARE
   ========================================================================== */

/**
 * Strip list-like appearance from lists by removing their bullets, and any
 * indentation.
 */

.o-list-bare {
  list-style: none;
  margin-left: 0;
}




/* ==========================================================================
   #LIST-INLINE
   ========================================================================== */

/**
 * The list-inline object simply displays a list of items in one line.
 */

.o-list-inline {
  margin-left: 0;
  list-style: none;
}


  .o-list-inline__item {
    display: inline-block;
  }





/* Delimited list.
   ========================================================================== */

/**
 * By default, applying this class will comma separate your list items. You can
 * change the delimiter by predefining the following variable:
 */

.o-list-inline--delimited {
  font-size: 0;

  > .o-list-inline__item {

    font-size: 1rem;

  }

  > .o-list-inline__item + .o-list-inline__item {

    &:before {
      content: ",\00A0";
    }

  }

}




/* ==========================================================================
   #MEDIA
   ========================================================================== */

/**
 * Place any image- and text-like content side-by-side, as per:
 * http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code
 */

.o-media {
  @include inuit-clearfix();
  display: block;
}


  .o-media__img {
    float: left;
    margin-right: var(--globalSpacingUnit);

    > img {
      display: block;
    }

  }


  .o-media__body {
    overflow: hidden;
    display: block;

    &,
    > :last-child {
      margin-bottom: 0;
    }

  }





/* Reversed media objects
   ========================================================================== */

.o-media--reverse {

  > .o-media__img {
    float: right;
    margin-right: 0;
    margin-left: var(--globalSpacingUnit);
  }

}





/* Gutterless media objects
   ========================================================================== */

.o-media--flush {

  > .o-media__img {
    margin-right: 0;
    margin-left:  0;
  }

}




/* *******************************************************
   Utilities
   ******************************************************/


/* ==========================================================================
 Widths
 ========================================================================== */

.u-1-2 {
  width: 100% !important;
  @media $tablet {
    width: 50% !important;
  }
}
.u-1-4 {
  width: 100% !important;
  @media $tablet {
    width: 25% !important;
  }
}



/**
* Attach our clearfix mixin to a utility class.
*/

.u-margin-top {
 margin-top: calc($spacingUnit) !important
}

/* ==========================================================================
  Spacing
  ========================================================================== */

/**
* Attach our clearfix mixin to a utility class.
*/

.u-margin-top {
  margin-top: calc($spacingUnit) !important
}


/* ==========================================================================
   Clearfix
   ========================================================================== */

/**
 * Attach our clearfix mixin to a utility class.
 */

.u-clearfix {
  &:after {
   content: "" !important;
   display: block !important;
   clear: both !important;
 }
}


/* ==========================================================================
   #HIDE
   ========================================================================== */

/**
 * Hide only visually, but have it available for screen readers:
 * http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
 */

.u-hidden-visually {
  border: 0 !important;
   clip: rect(0 0 0 0) !important;
   height: 1px !important;
   margin: -1px !important;
   overflow: hidden !important;
   padding: 0 !important;
   position: absolute !important;
   width: 1px !important;
}


/**
 * Hide visually and from screen readers.
 */

.u-hidden {
  display: none !important;
}



/* ==========================================================================
   #PRINT
   ========================================================================== */

/**
 * Very crude, reset-like styles taken from the HTML5 Boilerplate:
 * https://github.com/h5bp/html5-boilerplate/blob/5.3.0/dist/doc/css.md#print-styles
 * https://github.com/h5bp/html5-boilerplate/blob/master/dist/css/main.css#L205-L282
 */

@media print {

  /**
   * 1. Black prints faster: http://www.sanbeiji.com/archives/953
   */

  *,
  *:before,
  *:after,
  *:first-letter,
  *:first-line {
    background: transparent !important;
    color: #000 !important; /* [1] */
    box-shadow: none !important;
    text-shadow: none !important;
  }


  a,
  a:visited {
    text-decoration: underline;
  }

  a[href]:after {
    content: " (" attr(href) ")";
  }

  abbr[title]:after {
    content: " (" attr(title) ")";
  }


  /**
   * Don't show links that are fragment identifiers, or use the `javascript:`
   * pseudo protocol.
   */

  a[href^="#"]:after,
  a[href^="javascript:"]:after {
    content: "";
  }

  pre,
  blockquote {
    border: 1px solid #999;
    page-break-inside: avoid;
  }


  /**
   * Printing Tables: http://css-discuss.incutio.com/wiki/Printing_Tables
   */

  thead {
    display: table-header-group;
  }

  tr,
  img {
    page-break-inside: avoid;
  }


  img {
    max-width: 100% !important;
  }

  p,
  h2,
  h3 {
    orphans: 3;
    widows: 3;
  }

  h2,
  h3 {
    page-break-after: avoid;
  }

}

/* ==========================================================================
   END ELEMENTS OBJECTS AND UTILITIES
   ========================================================================== */







/* ============================================================================================================== */
